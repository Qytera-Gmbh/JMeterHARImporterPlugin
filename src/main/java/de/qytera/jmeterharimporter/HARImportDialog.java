package de.qytera.jmeterharimporter;

import de.sstoehr.harreader.HarReader;
import de.sstoehr.harreader.HarReaderException;
import de.sstoehr.harreader.model.Har;
import de.sstoehr.harreader.model.HarEntry;
import de.sstoehr.harreader.model.HarRequest;
import org.apache.jmeter.gui.plugin.MenuCreator;

import javax.swing.*;
import javax.swing.border.TitledBorder;
import javax.swing.filechooser.FileFilter;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.net.URI;
import java.util.HashMap;
import java.util.Map;

/**
 * This class implements the MenuCreator and ActionListener interfaces to create a menu item in JMeter's Tools menu
 * that allows the user to import an HTTP Archive (HAR) file. When the user clicks on the menu item, a dialog box is
 * displayed that allows the user to browse for the HAR file and import it. The imported HAR file is then used to
 * create JMeter sampler elements.
 *
 * @author Matthias Eggert - Qytera
 */
public class HARImportDialog implements MenuCreator, ActionListener {

    private static final int MINIMUM_DIALOG_WIDTH = 500;
    private static final int MINIMUM_DIALOG_HEIGHT = 400;
    private static final int MINIMUM_ELEMENT_HEIGHT = 30;

    private final JDialog importDialog;
    private final JTextField harInputField;
    private final JPanel ignoredHostsPanel;
    private final JButton importButton;
    private final JCheckBox addTimerCheckbox;
    private final JCheckBox addHeaderCheckbox;
    private final JCheckBox addCookiesCheckbox;

    /**
     * Maps hosts to their corresponding checkboxes.
     */
    private final Map<String, JCheckBox> hostCheckboxes = new HashMap<>();
    /**
     * The parsed HAR file.
     */
    private Har har;

    public HARImportDialog() {
        // Generated by the GUI designer.
        JPanel importForm = new JPanel();
        importForm.setLayout(new GridBagLayout());
        importForm.setMinimumSize(new Dimension(MINIMUM_DIALOG_WIDTH, MINIMUM_DIALOG_HEIGHT));
        importForm.setPreferredSize(new Dimension(MINIMUM_DIALOG_WIDTH, MINIMUM_DIALOG_HEIGHT));
        GridBagConstraints gbc = new GridBagConstraints();

        // HAR file area.
        JPanel harFilePanel = new JPanel();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.weightx = 0.0;
        gbc.weighty = 0.0;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        importForm.add(harFilePanel, gbc);
        harFilePanel.setLayout(new BorderLayout(0, 0));
        TitledBorder harFileBorder = BorderFactory.createTitledBorder("HAR file");
        harFileBorder.setTitleJustification(TitledBorder.DEFAULT_JUSTIFICATION);
        harFileBorder.setTitlePosition(TitledBorder.DEFAULT_POSITION);
        harFilePanel.setBorder(harFileBorder);
        this.harInputField = new JTextField();
        this.harInputField.setToolTipText("The chosen HAR file");
        this.harInputField.setMinimumSize(new Dimension(MINIMUM_DIALOG_WIDTH * 4 / 5, MINIMUM_ELEMENT_HEIGHT));
        this.harInputField.setPreferredSize(new Dimension(MINIMUM_DIALOG_WIDTH * 4 / 5, MINIMUM_ELEMENT_HEIGHT));
        harFilePanel.add(this.harInputField, BorderLayout.CENTER);
        JButton chooseHarFileButton = new JButton();
        chooseHarFileButton.setContentAreaFilled(true);
        chooseHarFileButton.setMinimumSize(new Dimension(MINIMUM_DIALOG_WIDTH / 5, MINIMUM_ELEMENT_HEIGHT));
        chooseHarFileButton.setPreferredSize(new Dimension(MINIMUM_DIALOG_WIDTH / 5, MINIMUM_ELEMENT_HEIGHT));
        chooseHarFileButton.setText("Choose");
        chooseHarFileButton.setToolTipText("Choose HAR file to import");
        harFilePanel.add(chooseHarFileButton, BorderLayout.EAST);

        // Ignored hosts area.
        this.ignoredHostsPanel = new JPanel();
        this.ignoredHostsPanel.setLayout(new BoxLayout(this.ignoredHostsPanel, BoxLayout.PAGE_AXIS));
        TitledBorder ignoredHostsBorder = BorderFactory.createTitledBorder("Select hosts to exclude");
        ignoredHostsBorder.setTitleJustification(TitledBorder.DEFAULT_JUSTIFICATION);
        ignoredHostsBorder.setTitlePosition(TitledBorder.DEFAULT_POSITION);
        this.ignoredHostsPanel.setBorder(ignoredHostsBorder);
        JScrollPane hostsScrollPane = new JScrollPane();
        hostsScrollPane.setViewportView(this.ignoredHostsPanel);
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.BOTH;
        importForm.add(hostsScrollPane, gbc);

        // add options
        JPanel optionsPanel = new JPanel();
        TitledBorder optionsPanelBorder = BorderFactory.createTitledBorder("Options");
        optionsPanelBorder.setTitleJustification(TitledBorder.DEFAULT_JUSTIFICATION);
        optionsPanelBorder.setTitlePosition(TitledBorder.DEFAULT_POSITION);
        optionsPanel.setBorder(optionsPanelBorder);
        optionsPanel.setLayout(new BoxLayout(optionsPanel, BoxLayout.Y_AXIS));
        optionsPanel.setMinimumSize(new Dimension(MINIMUM_DIALOG_WIDTH, MINIMUM_ELEMENT_HEIGHT * 3));
        optionsPanel.setPreferredSize(new Dimension(MINIMUM_DIALOG_WIDTH, MINIMUM_ELEMENT_HEIGHT * 3));

        addTimerCheckbox = new JCheckBox("Add Recorded Waiting Time");
        optionsPanel.add(addTimerCheckbox);

        addHeaderCheckbox = new JCheckBox("Add Recorded Headers");
        optionsPanel.add(addHeaderCheckbox);

        addCookiesCheckbox = new JCheckBox("Add Recorded Cookies");
        optionsPanel.add(addCookiesCheckbox);

        gbc.gridx = 0;
        gbc.gridy = 2;
        gbc.weightx = 0.0;
        gbc.weighty = 0.0;
        gbc.fill = GridBagConstraints.BOTH;
        importForm.add(optionsPanel, gbc);

        // Dialog actions area.
        JPanel dialogActionsPanel = new JPanel();
        dialogActionsPanel.setLayout(new GridBagLayout());
        dialogActionsPanel.setMinimumSize(new Dimension(MINIMUM_DIALOG_WIDTH, MINIMUM_ELEMENT_HEIGHT));
        dialogActionsPanel.setPreferredSize(new Dimension(MINIMUM_DIALOG_WIDTH, MINIMUM_ELEMENT_HEIGHT));
        gbc.gridx = 0;
        gbc.gridy = 3;
        gbc.weightx = 0.0;
        gbc.weighty = 0.0;
        gbc.fill = GridBagConstraints.BOTH;
        importForm.add(dialogActionsPanel, gbc);
        JButton cancelButton = new JButton();
        cancelButton.setMinimumSize(new Dimension(MINIMUM_DIALOG_WIDTH / 2, MINIMUM_ELEMENT_HEIGHT));
        cancelButton.setPreferredSize(new Dimension(MINIMUM_DIALOG_WIDTH / 2, MINIMUM_ELEMENT_HEIGHT));
        cancelButton.setText("Cancel");
        cancelButton.setToolTipText("Cancel the import");
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        dialogActionsPanel.add(cancelButton, gbc);
        this.importButton = new JButton();
        this.importButton.setMinimumSize(new Dimension(MINIMUM_DIALOG_WIDTH / 2, MINIMUM_ELEMENT_HEIGHT));
        this.importButton.setPreferredSize(new Dimension(MINIMUM_DIALOG_WIDTH / 2, MINIMUM_ELEMENT_HEIGHT));
        this.importButton.setText("Import");
        this.importButton.setToolTipText("Import the configured HAR file to JMeter");
        this.importButton.setEnabled(false);
        gbc.gridx = 1;
        gbc.gridy = 0;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        dialogActionsPanel.add(this.importButton, gbc);

        // Put dialog together.
        this.importDialog = new JDialog();
        this.importDialog.setTitle("Import HAR File");
        this.importDialog.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
        this.importDialog.setMinimumSize(new Dimension(MINIMUM_DIALOG_WIDTH, MINIMUM_DIALOG_HEIGHT));
        this.importDialog.setPreferredSize(new Dimension(MINIMUM_DIALOG_WIDTH, MINIMUM_DIALOG_HEIGHT));
        this.importDialog.add(importForm);

        chooseHarFileButton.addActionListener(e -> {
            JFileChooser fileChooser = new JFileChooser();
            fileChooser.setDialogTitle("Select HAR File");
            fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
            fileChooser.setAcceptAllFileFilterUsed(false);
            fileChooser.addChoosableFileFilter(new FileFilter() {
                @Override
                public boolean accept(File f) {
                    return f.getName().toLowerCase().endsWith(".har") || f.isDirectory();
                }

                @Override
                public String getDescription() {
                    return "HTTP Archive Files (*.har)";
                }
            });
            if (fileChooser.showOpenDialog(importDialog) == JFileChooser.APPROVE_OPTION) {
                harInputField.setText(fileChooser.getSelectedFile().getAbsolutePath());
                try {
                    clearPanel();
                    this.har = new HarReader().readFromFile(new File(harInputField.getText()));
                    this.har.getLog().getEntries().stream()
                            .map(HarEntry::getRequest)
                            .map(HarRequest::getUrl)
                            .map(URI::create)
                            .map(URI::getHost)
                            .distinct()
                            .sorted()
                            .forEach(host -> {
                                JCheckBox hostCheckbox = new JCheckBox();
                                hostCheckbox.setPreferredSize(
                                        new Dimension(
                                                ignoredHostsPanel.getPreferredSize().width,
                                                MINIMUM_ELEMENT_HEIGHT)
                                );
                                hostCheckbox.setText(host);
                                hostCheckboxes.put(host, hostCheckbox);
                                ignoredHostsPanel.add(hostCheckbox);
                            });
                    importButton.setEnabled(true);
                    importDialog.revalidate();
                    importDialog.repaint();
                } catch (HarReaderException exception) {
                    exception.printStackTrace();
                    importButton.setEnabled(false);
                }
            }
        });
        cancelButton.addActionListener(e -> importDialog.dispose());

        importButton.addActionListener(e -> {
            HARImporter importer = new HARImporter(har);
            hostCheckboxes.forEach((host, checkbox) -> {
                if (checkbox.isSelected()) {
                    importer.ignoreHost(host);
                }
            });
        importer.addNewThreadGroupWithSamplers(addTimerCheckbox.isSelected(), addHeaderCheckbox.isSelected(), addCookiesCheckbox.isSelected());
            importDialog.dispose();
        });
    }

    public void clearPanel() {
        this.ignoredHostsPanel.removeAll();
        // Revalidate and repaint the panel to reflect the changes.
        this.ignoredHostsPanel.revalidate();
        this.ignoredHostsPanel.repaint();
    }

    @Override
    public JMenuItem[] getMenuItemsAtLocation(MENU_LOCATION location) {
        if (location == MENU_LOCATION.TOOLS) {
            JMenuItem importItem = new JMenuItem("Import HAR File");
            importItem.addActionListener(this);
            return new JMenuItem[]{importItem};
        }

        return new JMenuItem[]{};
    }

    @Override
    public JMenu[] getTopLevelMenus() {
        // no top level menus
        return new JMenu[0];
    }

    @Override
    public boolean localeChanged(MenuElement menu) {
        // nothing to be done, only english is supported
        return false;
    }

    @Override
    public void localeChanged() {
        // nothing to be done, only english is supported
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        this.importDialog.setVisible(true);
    }

}
